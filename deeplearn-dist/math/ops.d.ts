import * as array_ops from './array_ops';
import * as batchnorm_ops from './batchnorm';
import * as binary_ops from './binary_ops';
import * as compare_ops from './compare';
import * as concat_ops from './concat';
import * as conv_ops from './conv';
import * as logical_ops from './logical_ops';
import * as lstm_ops from './lstm';
import * as matmul_ops from './matmul';
import * as norm_ops from './norm';
import * as pool_ops from './pool';
import * as reduction_ops from './reduction_ops';
import * as reverse_ops from './reverse';
import * as slice_ops from './slice';
import * as softmax_ops from './softmax';
import * as transpose_ops from './transpose';
import * as unary_ops from './unary_ops';
export declare const batchNormalization: typeof batchnorm_ops.Ops.batchNormalization;
export declare const batchNormalization2D: typeof batchnorm_ops.Ops.batchNormalization2D;
export declare const batchNormalization3D: typeof batchnorm_ops.Ops.batchNormalization3D;
export declare const batchNormalization4D: typeof batchnorm_ops.Ops.batchNormalization4D;
export declare const concat: typeof concat_ops.Ops.concat;
export declare const concat1D: typeof concat_ops.Ops.concat1D;
export declare const concat2D: typeof concat_ops.Ops.concat2D;
export declare const concat3D: typeof concat_ops.Ops.concat3D;
export declare const concat4D: typeof concat_ops.Ops.concat4D;
export declare const conv1d: typeof conv_ops.Ops.conv1d;
export declare const conv2d: typeof conv_ops.Ops.conv2d;
export declare const conv2dTranspose: typeof conv_ops.Ops.conv2dTranspose;
export declare const depthwiseConv2D: typeof conv_ops.Ops.depthwiseConv2D;
export declare const dotProduct: typeof matmul_ops.Ops.dotProduct;
export declare const matMul: typeof matmul_ops.Ops.matMul;
export declare const matrixTimesVector: typeof matmul_ops.Ops.matrixTimesVector;
export declare const outerProduct: typeof matmul_ops.Ops.outerProduct;
export declare const vectorTimesMatrix: typeof matmul_ops.Ops.vectorTimesMatrix;
export declare const avgPool: typeof pool_ops.Ops.avgPool;
export declare const maxPool: typeof pool_ops.Ops.maxPool;
export declare const minPool: typeof pool_ops.Ops.minPool;
export declare const transpose: typeof transpose_ops.Ops.transpose;
export declare const reverse: typeof reverse_ops.Ops.reverse;
export declare const reverse1D: typeof reverse_ops.Ops.reverse1D;
export declare const reverse2D: typeof reverse_ops.Ops.reverse2D;
export declare const reverse3D: typeof reverse_ops.Ops.reverse3D;
export declare const reverse4D: typeof reverse_ops.Ops.reverse4D;
export declare const slice: typeof slice_ops.Ops.slice;
export declare const slice1D: typeof slice_ops.Ops.slice1D;
export declare const slice2D: typeof slice_ops.Ops.slice2D;
export declare const slice3D: typeof slice_ops.Ops.slice3D;
export declare const slice4D: typeof slice_ops.Ops.slice4D;
export declare const argMax: typeof reduction_ops.Ops.argMax;
export declare const argMaxEquals: typeof reduction_ops.Ops.argMaxEquals;
export declare const argMin: typeof reduction_ops.Ops.argMin;
export declare const logSumExp: typeof reduction_ops.Ops.logSumExp;
export declare const max: typeof reduction_ops.Ops.max;
export declare const mean: typeof reduction_ops.Ops.mean;
export declare const min: typeof reduction_ops.Ops.min;
export declare const moments: typeof reduction_ops.Ops.moments;
export declare const sum: typeof reduction_ops.Ops.sum;
export declare const equal: typeof compare_ops.Ops.equal;
export declare const equalStrict: typeof compare_ops.Ops.equalStrict;
export declare const greater: typeof compare_ops.Ops.greater;
export declare const greaterStrict: typeof compare_ops.Ops.greaterStrict;
export declare const greaterEqual: typeof compare_ops.Ops.greaterEqual;
export declare const greaterEqualStrict: typeof compare_ops.Ops.greaterEqualStrict;
export declare const less: typeof compare_ops.Ops.less;
export declare const lessStrict: typeof compare_ops.Ops.lessStrict;
export declare const lessEqual: typeof compare_ops.Ops.lessEqual;
export declare const lessEqualStrict: typeof compare_ops.Ops.lessEqualStrict;
export declare const notEqual: typeof compare_ops.Ops.notEqual;
export declare const notEqualStrict: typeof compare_ops.Ops.notEqualStrict;
export declare const logicalAnd: typeof logical_ops.Ops.logicalAnd;
export declare const logicalOr: typeof logical_ops.Ops.logicalOr;
export declare const where: typeof logical_ops.Ops.where;
export declare const abs: typeof unary_ops.Ops.abs;
export declare const acos: typeof unary_ops.Ops.acos;
export declare const asin: typeof unary_ops.Ops.asin;
export declare const atan: typeof unary_ops.Ops.atan;
export declare const ceil: typeof unary_ops.Ops.ceil;
export declare const clip: typeof unary_ops.Ops.clip;
export declare const cos: typeof unary_ops.Ops.cos;
export declare const cosh: typeof unary_ops.Ops.cosh;
export declare const elu: typeof unary_ops.Ops.elu;
export declare const exp: typeof unary_ops.Ops.exp;
export declare const floor: typeof unary_ops.Ops.floor;
export declare const leakyRelu: typeof unary_ops.Ops.leakyRelu;
export declare const log: typeof unary_ops.Ops.log;
export declare const neg: typeof unary_ops.Ops.neg;
export declare const prelu: typeof unary_ops.Ops.prelu;
export declare const relu: typeof unary_ops.Ops.relu;
export declare const selu: typeof unary_ops.Ops.selu;
export declare const sigmoid: typeof unary_ops.Ops.sigmoid;
export declare const sin: typeof unary_ops.Ops.sin;
export declare const sinh: typeof unary_ops.Ops.sinh;
export declare const sqrt: typeof unary_ops.Ops.sqrt;
export declare const square: typeof unary_ops.Ops.square;
export declare const step: typeof unary_ops.Ops.step;
export declare const tan: typeof unary_ops.Ops.tan;
export declare const tanh: typeof unary_ops.Ops.tanh;
export declare const add: typeof binary_ops.Ops.add;
export declare const addStrict: typeof binary_ops.Ops.addStrict;
export declare const div: typeof binary_ops.Ops.div;
export declare const divStrict: typeof binary_ops.Ops.divStrict;
export declare const maximum: typeof binary_ops.Ops.maximum;
export declare const maximumStrict: typeof binary_ops.Ops.maximumStrict;
export declare const minimum: typeof binary_ops.Ops.minimum;
export declare const minimumStrict: typeof binary_ops.Ops.minimumStrict;
export declare const mul: typeof binary_ops.Ops.mul;
export declare const mulStrict: typeof binary_ops.Ops.mulStrict;
export declare const pow: typeof binary_ops.Ops.pow;
export declare const powStrict: typeof binary_ops.Ops.powStrict;
export declare const sub: typeof binary_ops.Ops.sub;
export declare const subStrict: typeof binary_ops.Ops.subStrict;
export declare const norm: typeof norm_ops.Ops.norm;
export declare const cast: typeof array_ops.Ops.cast;
export declare const clone: typeof array_ops.Ops.clone;
export declare const fromPixels: typeof array_ops.Ops.fromPixels;
export declare const ones: typeof array_ops.Ops.ones;
export declare const onesLike: typeof array_ops.Ops.onesLike;
export declare const zeros: typeof array_ops.Ops.zeros;
export declare const zerosLike: typeof array_ops.Ops.zerosLike;
export declare const rand: typeof array_ops.Ops.rand;
export declare const randNormal: typeof array_ops.Ops.randNormal;
export declare const truncatedNormal: typeof array_ops.Ops.truncatedNormal;
export declare const randUniform: typeof array_ops.Ops.randUniform;
export declare const reshape: typeof array_ops.Ops.reshape;
export declare const tile: typeof array_ops.Ops.tile;
export declare const gather: typeof array_ops.Ops.gather;
export declare const multinomial: typeof array_ops.Ops.multinomial;
export declare const oneHot: typeof array_ops.Ops.oneHot;
export declare const pad1D: typeof array_ops.Ops.pad1D;
export declare const pad2D: typeof array_ops.Ops.pad2D;
export declare const basicLSTMCell: typeof lstm_ops.Ops.basicLSTMCell;
export declare const multiRNNCell: typeof lstm_ops.Ops.multiRNNCell;
export declare const softmax: typeof softmax_ops.Ops.softmax;
import { NDArray, Array3D, Array4D } from './ndarray';
import { Rank } from './types';
export declare const losses: {
    softmaxCrossEntropy: <T extends NDArray<Rank>, O extends NDArray<Rank>>(labels: T, logits: T, dim?: number) => O;
};
export declare const image: {
    resizeBilinear: <T extends Array4D | Array3D>(images: T, size: [number, number], alignCorners?: boolean) => T;
};
