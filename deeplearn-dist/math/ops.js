"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var array_ops = require("./array_ops");
var batchnorm_ops = require("./batchnorm");
var binary_ops = require("./binary_ops");
var compare_ops = require("./compare");
var concat_ops = require("./concat");
var conv_ops = require("./conv");
var image_ops = require("./image_ops");
var logical_ops = require("./logical_ops");
var lstm_ops = require("./lstm");
var matmul_ops = require("./matmul");
var norm_ops = require("./norm");
var pool_ops = require("./pool");
var reduction_ops = require("./reduction_ops");
var reverse_ops = require("./reverse");
var slice_ops = require("./slice");
var softmax_ops = require("./softmax");
var transpose_ops = require("./transpose");
var unary_ops = require("./unary_ops");
exports.batchNormalization = batchnorm_ops.Ops.batchNormalization;
exports.batchNormalization2D = batchnorm_ops.Ops.batchNormalization2D;
exports.batchNormalization3D = batchnorm_ops.Ops.batchNormalization3D;
exports.batchNormalization4D = batchnorm_ops.Ops.batchNormalization4D;
exports.concat = concat_ops.Ops.concat;
exports.concat1D = concat_ops.Ops.concat1D;
exports.concat2D = concat_ops.Ops.concat2D;
exports.concat3D = concat_ops.Ops.concat3D;
exports.concat4D = concat_ops.Ops.concat4D;
exports.conv1d = conv_ops.Ops.conv1d;
exports.conv2d = conv_ops.Ops.conv2d;
exports.conv2dTranspose = conv_ops.Ops.conv2dTranspose;
exports.depthwiseConv2D = conv_ops.Ops.depthwiseConv2D;
exports.dotProduct = matmul_ops.Ops.dotProduct;
exports.matMul = matmul_ops.Ops.matMul;
exports.matrixTimesVector = matmul_ops.Ops.matrixTimesVector;
exports.outerProduct = matmul_ops.Ops.outerProduct;
exports.vectorTimesMatrix = matmul_ops.Ops.vectorTimesMatrix;
exports.avgPool = pool_ops.Ops.avgPool;
exports.maxPool = pool_ops.Ops.maxPool;
exports.minPool = pool_ops.Ops.minPool;
exports.transpose = transpose_ops.Ops.transpose;
exports.reverse = reverse_ops.Ops.reverse;
exports.reverse1D = reverse_ops.Ops.reverse1D;
exports.reverse2D = reverse_ops.Ops.reverse2D;
exports.reverse3D = reverse_ops.Ops.reverse3D;
exports.reverse4D = reverse_ops.Ops.reverse4D;
exports.slice = slice_ops.Ops.slice;
exports.slice1D = slice_ops.Ops.slice1D;
exports.slice2D = slice_ops.Ops.slice2D;
exports.slice3D = slice_ops.Ops.slice3D;
exports.slice4D = slice_ops.Ops.slice4D;
exports.argMax = reduction_ops.Ops.argMax;
exports.argMaxEquals = reduction_ops.Ops.argMaxEquals;
exports.argMin = reduction_ops.Ops.argMin;
exports.logSumExp = reduction_ops.Ops.logSumExp;
exports.max = reduction_ops.Ops.max;
exports.mean = reduction_ops.Ops.mean;
exports.min = reduction_ops.Ops.min;
exports.moments = reduction_ops.Ops.moments;
exports.sum = reduction_ops.Ops.sum;
exports.equal = compare_ops.Ops.equal;
exports.equalStrict = compare_ops.Ops.equalStrict;
exports.greater = compare_ops.Ops.greater;
exports.greaterStrict = compare_ops.Ops.greaterStrict;
exports.greaterEqual = compare_ops.Ops.greaterEqual;
exports.greaterEqualStrict = compare_ops.Ops.greaterEqualStrict;
exports.less = compare_ops.Ops.less;
exports.lessStrict = compare_ops.Ops.lessStrict;
exports.lessEqual = compare_ops.Ops.lessEqual;
exports.lessEqualStrict = compare_ops.Ops.lessEqualStrict;
exports.notEqual = compare_ops.Ops.notEqual;
exports.notEqualStrict = compare_ops.Ops.notEqualStrict;
exports.logicalAnd = logical_ops.Ops.logicalAnd;
exports.logicalOr = logical_ops.Ops.logicalOr;
exports.where = logical_ops.Ops.where;
exports.abs = unary_ops.Ops.abs;
exports.acos = unary_ops.Ops.acos;
exports.asin = unary_ops.Ops.asin;
exports.atan = unary_ops.Ops.atan;
exports.ceil = unary_ops.Ops.ceil;
exports.clip = unary_ops.Ops.clip;
exports.cos = unary_ops.Ops.cos;
exports.cosh = unary_ops.Ops.cosh;
exports.elu = unary_ops.Ops.elu;
exports.exp = unary_ops.Ops.exp;
exports.floor = unary_ops.Ops.floor;
exports.leakyRelu = unary_ops.Ops.leakyRelu;
exports.log = unary_ops.Ops.log;
exports.neg = unary_ops.Ops.neg;
exports.prelu = unary_ops.Ops.prelu;
exports.relu = unary_ops.Ops.relu;
exports.selu = unary_ops.Ops.selu;
exports.sigmoid = unary_ops.Ops.sigmoid;
exports.sin = unary_ops.Ops.sin;
exports.sinh = unary_ops.Ops.sinh;
exports.sqrt = unary_ops.Ops.sqrt;
exports.square = unary_ops.Ops.square;
exports.step = unary_ops.Ops.step;
exports.tan = unary_ops.Ops.tan;
exports.tanh = unary_ops.Ops.tanh;
exports.add = binary_ops.Ops.add;
exports.addStrict = binary_ops.Ops.addStrict;
exports.div = binary_ops.Ops.div;
exports.divStrict = binary_ops.Ops.divStrict;
exports.maximum = binary_ops.Ops.maximum;
exports.maximumStrict = binary_ops.Ops.maximumStrict;
exports.minimum = binary_ops.Ops.minimum;
exports.minimumStrict = binary_ops.Ops.minimumStrict;
exports.mul = binary_ops.Ops.mul;
exports.mulStrict = binary_ops.Ops.mulStrict;
exports.pow = binary_ops.Ops.pow;
exports.powStrict = binary_ops.Ops.powStrict;
exports.sub = binary_ops.Ops.sub;
exports.subStrict = binary_ops.Ops.subStrict;
exports.norm = norm_ops.Ops.norm;
exports.cast = array_ops.Ops.cast;
exports.clone = array_ops.Ops.clone;
exports.fromPixels = array_ops.Ops.fromPixels;
exports.ones = array_ops.Ops.ones;
exports.onesLike = array_ops.Ops.onesLike;
exports.zeros = array_ops.Ops.zeros;
exports.zerosLike = array_ops.Ops.zerosLike;
exports.rand = array_ops.Ops.rand;
exports.randNormal = array_ops.Ops.randNormal;
exports.truncatedNormal = array_ops.Ops.truncatedNormal;
exports.randUniform = array_ops.Ops.randUniform;
exports.reshape = array_ops.Ops.reshape;
exports.tile = array_ops.Ops.tile;
exports.gather = array_ops.Ops.gather;
exports.multinomial = array_ops.Ops.multinomial;
exports.oneHot = array_ops.Ops.oneHot;
exports.pad1D = array_ops.Ops.pad1D;
exports.pad2D = array_ops.Ops.pad2D;
exports.basicLSTMCell = lstm_ops.Ops.basicLSTMCell;
exports.multiRNNCell = lstm_ops.Ops.multiRNNCell;
exports.softmax = softmax_ops.Ops.softmax;
var ndarray_1 = require("./ndarray");
var types_1 = require("./types");
[ndarray_1.NDArray, types_1.Rank, ndarray_1.Array3D, ndarray_1.Array4D];
exports.losses = {
    softmaxCrossEntropy: softmax_ops.Ops.softmaxCrossEntropy
};
exports.image = {
    resizeBilinear: image_ops.Ops.resizeBilinear
};
//# sourceMappingURL=ops.js.map